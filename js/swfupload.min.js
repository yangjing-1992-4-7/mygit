function _typeof(t) {
    return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function e(t) {
        return typeof t
    }
    : function n(t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
    }
    )(t)
}
var SWFUpload;
SWFUpload == undefined && (SWFUpload = function SWFUpload(t) {
    this.initSWFUpload(t)
}
),
SWFUpload.prototype.fkEval = function(t) {
    return e = t,
    window.eval.call(window, e);
    var e
}
,
SWFUpload.prototype.initSWFUpload = function(t) {
    try {
        this.customSettings = {},
        this.settings = t,
        this.eventQueue = [],
        this.movieName = "SWFUpload_" + SWFUpload.movieCount++,
        this.movieElement = null,
        (SWFUpload.instances[this.movieName] = this).initSettings(),
        this.loadFlash(),
        this.displayDebugInfo()
    } catch (e) {
        throw delete SWFUpload.instances[this.movieName],
        e
    }
}
,
SWFUpload.instances = {},
SWFUpload.movieCount = 0,
SWFUpload.version = "2.2.0 2009-03-25",
SWFUpload.QUEUE_ERROR = {
    QUEUE_LIMIT_EXCEEDED: -100,
    FILE_EXCEEDS_SIZE_LIMIT: -110,
    ZERO_BYTE_FILE: -120,
    INVALID_FILETYPE: -130
},
SWFUpload.UPLOAD_ERROR = {
    HTTP_ERROR: -200,
    MISSING_UPLOAD_URL: -210,
    IO_ERROR: -220,
    SECURITY_ERROR: -230,
    UPLOAD_LIMIT_EXCEEDED: -240,
    UPLOAD_FAILED: -250,
    SPECIFIED_FILE_ID_NOT_FOUND: -260,
    FILE_VALIDATION_FAILED: -270,
    FILE_CANCELLED: -280,
    UPLOAD_STOPPED: -290
},
SWFUpload.FILE_STATUS = {
    QUEUED: -1,
    IN_PROGRESS: -2,
    ERROR: -3,
    COMPLETE: -4,
    CANCELLED: -5
},
SWFUpload.BUTTON_ACTION = {
    SELECT_FILE: -100,
    SELECT_FILES: -110,
    START_UPLOAD: -120
},
SWFUpload.CURSOR = {
    ARROW: -1,
    HAND: -2
},
SWFUpload.WINDOW_MODE = {
    WINDOW: "window",
    TRANSPARENT: "transparent",
    OPAQUE: "opaque"
},
SWFUpload.completeURL = function(t) {
    if ("string" != typeof t || t.match(/^https?:\/\//i) || t.match(/^\//))
        return t;
    window.location.protocol,
    window.location.hostname,
    window.location.port && window.location.port;
    var e = window.location.pathname.lastIndexOf("/");
    return path = e <= 0 ? "/" : window.location.pathname.substr(0, e) + "/",
    path + t
}
,
SWFUpload.prototype.initSettings = function() {
    this.ensureDefault = function(t, e) {
        this.settings[t] = this.settings[t] == undefined ? e : this.settings[t]
    }
    ,
    this.ensureDefault("upload_url", ""),
    this.ensureDefault("preserve_relative_urls", !1),
    this.ensureDefault("file_post_name", "Filedata"),
    this.ensureDefault("post_params", {}),
    this.ensureDefault("use_query_string", !1),
    this.ensureDefault("requeue_on_error", !1),
    this.ensureDefault("http_success", []),
    this.ensureDefault("assume_success_timeout", 0),
    this.ensureDefault("file_types", "*.*"),
    this.ensureDefault("file_types_description", "All Files"),
    this.ensureDefault("file_size_limit", 0),
    this.ensureDefault("file_upload_limit", 0),
    this.ensureDefault("file_queue_limit", 0),
    this.ensureDefault("flash_url", "swfupload.swf"),
    this.ensureDefault("prevent_swf_caching", !0),
    this.ensureDefault("button_image_url", ""),
    this.ensureDefault("button_width", 1),
    this.ensureDefault("button_height", 1),
    this.ensureDefault("button_text", ""),
    this.ensureDefault("button_text_style", "color: #000000; font-size: 16pt;"),
    this.ensureDefault("button_text_top_padding", 0),
    this.ensureDefault("button_text_left_padding", 0),
    this.ensureDefault("button_action", SWFUpload.BUTTON_ACTION.SELECT_FILES),
    this.ensureDefault("button_disabled", !1),
    this.ensureDefault("button_placeholder_id", ""),
    this.ensureDefault("button_placeholder", null),
    this.ensureDefault("button_cursor", SWFUpload.CURSOR.ARROW),
    this.ensureDefault("button_window_mode", SWFUpload.WINDOW_MODE.WINDOW),
    this.ensureDefault("debug", !1),
    this.settings.debug_enabled = this.settings.debug,
    this.settings.return_upload_start_handler = this.returnUploadStart,
    this.ensureDefault("swfupload_loaded_handler", null),
    this.ensureDefault("file_dialog_start_handler", null),
    this.ensureDefault("file_queued_handler", null),
    this.ensureDefault("file_queue_error_handler", null),
    this.ensureDefault("file_dialog_complete_handler", null),
    this.ensureDefault("upload_start_handler", null),
    this.ensureDefault("upload_progress_handler", null),
    this.ensureDefault("upload_error_handler", null),
    this.ensureDefault("upload_success_handler", null),
    this.ensureDefault("upload_complete_handler", null),
    this.ensureDefault("debug_handler", this.debugMessage),
    this.ensureDefault("custom_settings", {}),
    this.customSettings = this.settings.custom_settings,
    this.settings.prevent_swf_caching && (this.settings.flash_url = this.settings.flash_url + (this.settings.flash_url.indexOf("?") < 0 ? "?" : "&") + "preventswfcaching=" + (new Date).getTime()),
    this.settings.preserve_relative_urls || (this.settings.upload_url = SWFUpload.completeURL(this.settings.upload_url),
    this.settings.button_image_url = SWFUpload.completeURL(this.settings.button_image_url)),
    delete this.ensureDefault
}
,
SWFUpload.prototype.loadFlash = function() {
    var t, e;
    if (null !== document.getElementById(this.movieName))
        throw "ID " + this.movieName + " is already in use. The Flash Object could not be added";
    if ((t = document.getElementById(this.settings.button_placeholder_id) || this.settings.button_placeholder) == undefined)
        throw "Could not find the placeholder element: " + this.settings.button_placeholder_id;
    (e = document.createElement("div")).innerHTML = this.getFlashHTML(),
    t.parentNode.replaceChild(e.firstChild, t),
    window[this.movieName] == undefined && (window[this.movieName] = this.getMovieElement())
}
,
SWFUpload.prototype.getFlashHTML = function() {
    var t, e = this.settings.swfObjectCss;
    return e = e !== undefined ? e : "",
    5 == this.settings.button_image_type ? t = "border:1px solid #dadada;background-color: #F5F5F5;float:left;border-radius:2px;" : 6 == this.settings.button_image_type && (t = "border:1px solid #dadada;float:left;"),
    ['<object id="', this.movieName, '" type="application/x-shockwave-flash" data="', this.settings.flash_url, '" width="', this.settings.button_width, '" height="', this.settings.button_height, '" class="swfupload"  style="', 5 == this.settings.button_image_type || 6 == this.settings.button_image_type ? t : e, '">', '<param name="wmode" value="', this.settings.button_window_mode, '" />', '<param name="movie" value="', this.settings.flash_url, '" />', '<param name="quality" value="high" />', '<param name="menu" value="false" />', '<param name="allowScriptAccess" value="always" />', '<param name="flashvars" value="' + this.getFlashVars() + '" />', "</object>"].join("")
}
,
SWFUpload.prototype.getFlashVars = function() {
    var t = this.buildParamString()
      , e = this.settings.http_success.join(",");
    return ["movieName=", encodeURIComponent(this.movieName), "&amp;uploadURL=", encodeURIComponent(this.settings.upload_url), "&amp;useQueryString=", encodeURIComponent(this.settings.use_query_string), "&amp;requeueOnError=", encodeURIComponent(this.settings.requeue_on_error), "&amp;httpSuccess=", encodeURIComponent(e), "&amp;assumeSuccessTimeout=", encodeURIComponent(this.settings.assume_success_timeout), "&amp;params=", encodeURIComponent(t), "&amp;filePostName=", encodeURIComponent(this.settings.file_post_name), "&amp;fileTypes=", encodeURIComponent(this.settings.file_types), "&amp;fileTypesDescription=", encodeURIComponent(this.settings.file_types_description), "&amp;fileSizeLimit=", encodeURIComponent(this.settings.file_size_limit), "&amp;fileUploadLimit=", encodeURIComponent(this.settings.file_upload_limit), "&amp;fileQueueLimit=", encodeURIComponent(this.settings.file_queue_limit), "&amp;debugEnabled=", encodeURIComponent(this.settings.debug_enabled), "&amp;buttonImageURL=", encodeURIComponent(this.settings.button_image_url), "&amp;buttonWidth=", encodeURIComponent(this.settings.button_width), "&amp;buttonHeight=", encodeURIComponent(this.settings.button_height), "&amp;buttonText=", encodeURIComponent(this.settings.button_text), "&amp;buttonTextTopPadding=", encodeURIComponent(this.settings.button_text_top_padding), "&amp;buttonTextLeftPadding=", encodeURIComponent(this.settings.button_text_left_padding), "&amp;buttonTextStyle=", encodeURIComponent(this.settings.button_text_style), "&amp;buttonAction=", encodeURIComponent(this.settings.button_action), "&amp;buttonDisabled=", encodeURIComponent(this.settings.button_disabled), "&amp;buttonCursor=", encodeURIComponent(this.settings.button_cursor)].join("")
}
,
SWFUpload.prototype.getMovieElement = function() {
    if (this.movieElement == undefined && (this.movieElement = document.getElementById(this.movieName)),
    null === this.movieElement)
        throw "Could not find Flash element";
    return this.movieElement
}
,
SWFUpload.prototype.buildParamString = function() {
    var t = this.settings.post_params
      , e = [];
    if ("object" === _typeof(t))
        for (var n in t)
            t.hasOwnProperty(n) && e.push(encodeURIComponent(n.toString()) + "=" + encodeURIComponent(t[n].toString()));
    return e.join("&amp;")
}
,
SWFUpload.prototype.destroy = function() {
    try {
        this.cancelUpload(null, !1);
        var t = null;
        if ((t = this.getMovieElement()) && "unknown" == typeof t.CallFunction) {
            for (var e in t)
                try {
                    "function" == typeof t[e] && (t[e] = null)
                } catch (n) {}
            try {
                t.parentNode.removeChild(t)
            } catch (s) {}
        }
        return window[this.movieName] = null,
        SWFUpload.instances[this.movieName] = null,
        delete SWFUpload.instances[this.movieName],
        this.movieElement = null,
        this.settings = null,
        this.customSettings = null,
        this.eventQueue = null,
        !(this.movieName = null)
    } catch (i) {
        return !1
    }
}
,
SWFUpload.prototype.displayDebugInfo = function() {
    this.debug(["---SWFUpload Instance Info---\n", "Version: ", SWFUpload.version, "\n", "Movie Name: ", this.movieName, "\n", "Settings:\n", "\t", "upload_url:               ", this.settings.upload_url, "\n", "\t", "flash_url:                ", this.settings.flash_url, "\n", "\t", "use_query_string:         ", this.settings.use_query_string.toString(), "\n", "\t", "requeue_on_error:         ", this.settings.requeue_on_error.toString(), "\n", "\t", "http_success:             ", this.settings.http_success.join(", "), "\n", "\t", "assume_success_timeout:   ", this.settings.assume_success_timeout, "\n", "\t", "file_post_name:           ", this.settings.file_post_name, "\n", "\t", "post_params:              ", this.settings.post_params.toString(), "\n", "\t", "file_types:               ", this.settings.file_types, "\n", "\t", "file_types_description:   ", this.settings.file_types_description, "\n", "\t", "file_size_limit:          ", this.settings.file_size_limit, "\n", "\t", "file_upload_limit:        ", this.settings.file_upload_limit, "\n", "\t", "file_queue_limit:         ", this.settings.file_queue_limit, "\n", "\t", "debug:                    ", this.settings.debug.toString(), "\n", "\t", "prevent_swf_caching:      ", this.settings.prevent_swf_caching.toString(), "\n", "\t", "button_placeholder_id:    ", this.settings.button_placeholder_id.toString(), "\n", "\t", "button_placeholder:       ", this.settings.button_placeholder ? "Set" : "Not Set", "\n", "\t", "button_image_url:         ", this.settings.button_image_url.toString(), "\n", "\t", "button_width:             ", this.settings.button_width.toString(), "\n", "\t", "button_height:            ", this.settings.button_height.toString(), "\n", "\t", "button_text:              ", this.settings.button_text.toString(), "\n", "\t", "button_text_style:        ", this.settings.button_text_style.toString(), "\n", "\t", "button_text_top_padding:  ", this.settings.button_text_top_padding.toString(), "\n", "\t", "button_text_left_padding: ", this.settings.button_text_left_padding.toString(), "\n", "\t", "button_action:            ", this.settings.button_action.toString(), "\n", "\t", "button_disabled:          ", this.settings.button_disabled.toString(), "\n", "\t", "custom_settings:          ", this.settings.custom_settings.toString(), "\n", "Event Handlers:\n", "\t", "swfupload_loaded_handler assigned:  ", ("function" == typeof this.settings.swfupload_loaded_handler).toString(), "\n", "\t", "file_dialog_start_handler assigned: ", ("function" == typeof this.settings.file_dialog_start_handler).toString(), "\n", "\t", "file_queued_handler assigned:       ", ("function" == typeof this.settings.file_queued_handler).toString(), "\n", "\t", "file_queue_error_handler assigned:  ", ("function" == typeof this.settings.file_queue_error_handler).toString(), "\n", "\t", "upload_start_handler assigned:      ", ("function" == typeof this.settings.upload_start_handler).toString(), "\n", "\t", "upload_progress_handler assigned:   ", ("function" == typeof this.settings.upload_progress_handler).toString(), "\n", "\t", "upload_error_handler assigned:      ", ("function" == typeof this.settings.upload_error_handler).toString(), "\n", "\t", "upload_success_handler assigned:    ", ("function" == typeof this.settings.upload_success_handler).toString(), "\n", "\t", "upload_complete_handler assigned:   ", ("function" == typeof this.settings.upload_complete_handler).toString(), "\n", "\t", "debug_handler assigned:             ", ("function" == typeof this.settings.debug_handler).toString(), "\n"].join(""))
}
,
SWFUpload.prototype.addSetting = function(t, e, n) {
    return e == undefined ? this.settings[t] = n : this.settings[t] = e
}
,
SWFUpload.prototype.getSetting = function(t) {
    return this.settings[t] != undefined ? this.settings[t] : ""
}
,
SWFUpload.prototype.callFlash = function(functionName, argumentArray) {
    argumentArray = argumentArray || [];
    var movieElement = this.getMovieElement(), returnValue, returnString;
    try {
        returnString = movieElement.CallFunction('<invoke name="' + functionName + '" returntype="javascript">' + __flash__argumentsToXML(argumentArray, 0) + "</invoke>"),
        returnValue = eval(returnString)
    } catch (ex) {
        throw "Call to " + functionName + " failed"
    }
    return returnValue != undefined && "object" === _typeof(returnValue.post) && (returnValue = this.unescapeFilePostParams(returnValue)),
    returnValue
}
,
SWFUpload.prototype.selectFile = function() {
    this.callFlash("SelectFile")
}
,
SWFUpload.prototype.selectFiles = function() {
    this.callFlash("SelectFiles")
}
,
SWFUpload.prototype.startUpload = function(t) {
    this.callFlash("StartUpload", [t])
}
,
SWFUpload.prototype.cancelUpload = function(t, e) {
    !1 !== e && (e = !0),
    this.callFlash("CancelUpload", [t, e])
}
,
SWFUpload.prototype.stopUpload = function() {
    this.callFlash("StopUpload")
}
,
SWFUpload.prototype.getStats = function() {
    return this.callFlash("GetStats")
}
,
SWFUpload.prototype.setStats = function(t) {
    this.callFlash("SetStats", [t])
}
,
SWFUpload.prototype.getFile = function(t) {
    return "number" == typeof t ? this.callFlash("GetFileByIndex", [t]) : this.callFlash("GetFile", [t])
}
,
SWFUpload.prototype.addFileParam = function(t, e, n) {
    return this.callFlash("AddFileParam", [t, e, n])
}
,
SWFUpload.prototype.removeFileParam = function(t, e) {
    this.callFlash("RemoveFileParam", [t, e])
}
,
SWFUpload.prototype.setUploadURL = function(t) {
    this.settings.upload_url = t.toString(),
    this.callFlash("SetUploadURL", [t])
}
,
SWFUpload.prototype.setPostParams = function(t) {
    this.settings.post_params = t,
    this.callFlash("SetPostParams", [t])
}
,
SWFUpload.prototype.addPostParam = function(t, e) {
    this.settings.post_params[t] = e,
    this.callFlash("SetPostParams", [this.settings.post_params])
}
,
SWFUpload.prototype.removePostParam = function(t) {
    delete this.settings.post_params[t],
    this.callFlash("SetPostParams", [this.settings.post_params])
}
,
SWFUpload.prototype.setFileTypes = function(t, e) {
    this.settings.file_types = t,
    this.settings.file_types_description = e,
    this.callFlash("SetFileTypes", [t, e])
}
,
SWFUpload.prototype.setFileSizeLimit = function(t) {
    this.settings.file_size_limit = t,
    this.callFlash("SetFileSizeLimit", [t])
}
,
SWFUpload.prototype.setFileUploadLimit = function(t) {
    this.settings.file_upload_limit = t,
    this.callFlash("SetFileUploadLimit", [t])
}
,
SWFUpload.prototype.setFileQueueLimit = function(t) {
    this.settings.file_queue_limit = t,
    this.callFlash("SetFileQueueLimit", [t])
}
,
SWFUpload.prototype.setFilePostName = function(t) {
    this.settings.file_post_name = t,
    this.callFlash("SetFilePostName", [t])
}
,
SWFUpload.prototype.setUseQueryString = function(t) {
    this.settings.use_query_string = t,
    this.callFlash("SetUseQueryString", [t])
}
,
SWFUpload.prototype.setRequeueOnError = function(t) {
    this.settings.requeue_on_error = t,
    this.callFlash("SetRequeueOnError", [t])
}
,
SWFUpload.prototype.setHTTPSuccess = function(t) {
    "string" == typeof t && (t = t.replace(" ", "").split(",")),
    this.settings.http_success = t,
    this.callFlash("SetHTTPSuccess", [t])
}
,
SWFUpload.prototype.setAssumeSuccessTimeout = function(t) {
    this.settings.assume_success_timeout = t,
    this.callFlash("SetAssumeSuccessTimeout", [t])
}
,
SWFUpload.prototype.setDebugEnabled = function(t) {
    this.settings.debug_enabled = t,
    this.callFlash("SetDebugEnabled", [t])
}
,
SWFUpload.prototype.setButtonImageURL = function(t) {
    t == undefined && (t = ""),
    this.settings.button_image_url = t,
    this.callFlash("SetButtonImageURL", [t])
}
,
SWFUpload.prototype.setButtonDimensions = function(t, e) {
    this.settings.button_width = t,
    this.settings.button_height = e;
    var n = this.getMovieElement();
    n != undefined && (n.style.width = t + "px",
    n.style.height = e + "px"),
    this.callFlash("SetButtonDimensions", [t, e])
}
,
SWFUpload.prototype.setButtonText = function(t) {
    this.settings.button_text = t,
    this.callFlash("SetButtonText", [t])
}
,
SWFUpload.prototype.setButtonTextPadding = function(t, e) {
    this.settings.button_text_top_padding = e,
    this.settings.button_text_left_padding = t,
    this.callFlash("SetButtonTextPadding", [t, e])
}
,
SWFUpload.prototype.setButtonTextStyle = function(t) {
    this.settings.button_text_style = t,
    this.callFlash("SetButtonTextStyle", [t])
}
,
SWFUpload.prototype.setButtonDisabled = function(t) {
    this.settings.button_disabled = t,
    this.callFlash("SetButtonDisabled", [t])
}
,
SWFUpload.prototype.setButtonAction = function(t) {
    this.settings.button_action = t,
    this.callFlash("SetButtonAction", [t])
}
,
SWFUpload.prototype.setButtonCursor = function(t) {
    this.settings.button_cursor = t,
    this.callFlash("SetButtonCursor", [t])
}
,
SWFUpload.prototype.queueEvent = function(t, e) {
    e == undefined ? e = [] : e instanceof Array || (e = [e]);
    var n = this;
    if ("function" == typeof this.settings[t])
        this.eventQueue.push(function() {
            this.settings[t].apply(this, e)
        }),
        setTimeout(function() {
            n.executeNextEvent()
        }, 0);
    else if (null !== this.settings[t])
        throw "Event handler " + t + " is unknown or is not a function"
}
,
SWFUpload.prototype.executeNextEvent = function() {
    var t = this.eventQueue ? this.eventQueue.shift() : null;
    "function" == typeof t && t.apply(this)
}
,
SWFUpload.prototype.unescapeFilePostParams = function(t) {
    var e, n = /[$]([0-9a-f]{4})/i, s = {};
    if (t != undefined) {
        for (var i in t.post)
            if (t.post.hasOwnProperty(i)) {
                var o;
                for (e = i; null !== (o = n.exec(e)); )
                    e = e.replace(o[0], String.fromCharCode(parseInt("0x" + o[1], 16)));
                s[e] = t.post[i]
            }
        t.post = s
    }
    return t
}
,
SWFUpload.prototype.testExternalInterface = function() {
    try {
        return this.callFlash("TestExternalInterface")
    } catch (t) {
        return !1
    }
}
,
SWFUpload.prototype.flashReady = function() {
    var t = this.getMovieElement();
    t ? (this.cleanUp(t),
    this.queueEvent("swfupload_loaded_handler")) : this.debug("Flash called back ready but the flash movie can't be found.")
}
,
SWFUpload.prototype.cleanUp = function(t) {
    try {
        if (this.movieElement && "unknown" == typeof t.CallFunction)
            for (var e in this.debug("Removing Flash functions hooks (this should only run in IE and should prevent memory leaks)"),
            t)
                try {
                    "function" == typeof t[e] && (t[e] = null)
                } catch (n) {}
    } catch (s) {}
    window.__flash__removeCallback = function(t, e) {
        try {
            t && (t[e] = null)
        } catch (n) {}
    }
}
,
SWFUpload.prototype.fileDialogStart = function() {
    this.queueEvent("file_dialog_start_handler")
}
,
SWFUpload.prototype.fileQueued = function(t) {
    t = this.unescapeFilePostParams(t),
    this.queueEvent("file_queued_handler", t)
}
,
SWFUpload.prototype.fileQueueError = function(t, e, n) {
    t = this.unescapeFilePostParams(t),
    this.queueEvent("file_queue_error_handler", [t, e, n])
}
,
SWFUpload.prototype.fileDialogComplete = function(t, e, n) {
    this.queueEvent("file_dialog_complete_handler", [t, e, n])
}
,
SWFUpload.prototype.uploadStart = function(t) {
    t = this.unescapeFilePostParams(t),
    this.queueEvent("return_upload_start_handler", t)
}
,
SWFUpload.prototype.returnUploadStart = function(t) {
    var e;
    if ("function" == typeof this.settings.upload_start_handler)
        t = this.unescapeFilePostParams(t),
        e = this.settings.upload_start_handler.call(this, t);
    else if (this.settings.upload_start_handler != undefined)
        throw "upload_start_handler must be a function";
    e === undefined && (e = !0),
    e = !!e,
    this.callFlash("ReturnUploadStart", [e])
}
,
SWFUpload.prototype.uploadProgress = function(t, e, n) {
    t = this.unescapeFilePostParams(t),
    this.queueEvent("upload_progress_handler", [t, e, n])
}
,
SWFUpload.prototype.uploadError = function(t, e, n) {
    t = this.unescapeFilePostParams(t),
    this.queueEvent("upload_error_handler", [t, e, n])
}
,
SWFUpload.prototype.uploadSuccess = function(t, e, n) {
    t = this.unescapeFilePostParams(t),
    this.queueEvent("upload_success_handler", [t, e, n])
}
,
SWFUpload.prototype.uploadComplete = function(t) {
    t = this.unescapeFilePostParams(t),
    this.queueEvent("upload_complete_handler", t)
}
,
SWFUpload.prototype.debug = function(t) {
    this.queueEvent("debug_handler", t)
}
,
SWFUpload.prototype.debugMessage = function(t) {
    if (this.settings.debug) {
        var e, n = [];
        if ("object" === _typeof(t) && "string" == typeof t.name && "string" == typeof t.message) {
            for (var s in t)
                t.hasOwnProperty(s) && n.push(s + ": " + t[s]);
            e = "EXCEPTION: " + (n = (e = n.join("\n") || "").split("\n")).join("\nEXCEPTION: "),
            SWFUpload.Console.writeLine(e)
        } else
            SWFUpload.Console.writeLine(t)
    }
}
,
SWFUpload.Console = {},
SWFUpload.Console.writeLine = function(t) {
    var e, n;
    try {
        (e = document.getElementById("SWFUpload_Console")) || (n = document.createElement("form"),
        document.getElementsByTagName("body")[0].appendChild(n),
        (e = document.createElement("textarea")).id = "SWFUpload_Console",
        e.style.fontFamily = "monospace",
        e.setAttribute("wrap", "off"),
        e.wrap = "off",
        e.style.overflow = "auto",
        e.style.width = "700px",
        e.style.height = "350px",
        e.style.margin = "5px",
        n.appendChild(e)),
        e.value += t + "\n",
        e.scrollTop = e.scrollHeight - e.clientHeight
    } catch (s) {
        alert("Exception: " + s.name + " Message: " + s.message)
    }
}
;
var SWFUploadCreator = {
    check: function() {
        var t = 0
          , e = 0;
        {
            var n;
            if (navigator.plugins && 0 < navigator.plugins.length && (n = navigator.plugins["Shockwave Flash"])) {
                t = 1;
                for (var s = n.description.split(" "), i = 0; i < s.length; ++i)
                    isNaN(parseInt(s[i])) || (e = parseInt(s[i]))
            }
        }
        return {
            f: t,
            v: e
        }
    },
    create: function(i) {
        var t;
        "object" != _typeof(i.post_params) && (i.post_params = {}),
        "string" == typeof $("#_FSESSIONID").attr("value") && (i.post_params._FSESSIONID = $("#_FSESSIONID").attr("value")),
        "string" == typeof $("#_TOKEN").attr("value") && (i.post_params._TOKEN = $("#_TOKEN").attr("value"));
        var e = {
            flash_url: "/js/comm/SWFUpload2v/Flash/swfupload.swf",
            use_query_string: !0,
            button_image_type: 1,
            upload_delay: 1e3,
            button_height: "22",
            button_width: "71",
            button_cursor: SWFUpload.CURSOR.HAND,
            button_window_mode: SWFUpload.WINDOW_MODE.TRANSPARENT
        }
          , n = "";
        if ("undefined" != typeof Fai && "undefined" != typeof Fai.top._resRoot && (n = Fai.top._resRoot,
        e.flash_url = "/res" + e.flash_url),
        "undefined" != typeof Fai && (Fai.isSafari() || Fai.isMozilla()) && "undefined" != typeof Fai.top.document.URL) {
            var s = Fai.top.document.URL
              , o = !1;
            if (null != s) {
                for (var a = 0; a < s.length; a++) {
                    var l = s.charAt(a);
                    if (Fai.isChinese(l)) {
                        o = !0;
                        break
                    }
                }
                if (1 == o && "undefined" != typeof i.upload_url) {
                    var u = i.upload_url;
                    null != u && (0 <= u.indexOf("http") || 0 <= u.indexOf("www") || ("/" != u.charAt(0) && (u = "/" + u),
                    i.upload_url = Fai.top._siteDomain + u))
                }
            }
        }
        if (Fai.top._lcid && 2052 != Fai.top._lcid)
            5 == i.button_image_type ? button_image_url = "" : $.extend(e, {
                button_image_url: n + "/image/comm/swfupload/swfuploadbtn_lan.png"
            });
        else if (i.button_image_type) {
            if (5 == i.button_image_type || 6 == i.button_image_type)
                r = "";
            else
                var r = n + "/image/comm/swfupload/swfuploadbtn" + i.button_image_type + ".png";
            $.extend(e, {
                button_image_url: r
            })
        } else
            $.extend(e, {
                button_image_url: n + "/image/comm/swfupload/swfuploadbtn1.png"
            });
        if (i.view_progress && (e.upload_progress_handler = function(t, e, n) {
            var s = 0;
            0 != n && (s = Math.floor(e / n * 100)),
            100 <= s && (s = 99),
            i.view_progress(t, e, n, s)
        }
        ),
        SWFUploadCreator.check().f)
            return $.extend(e, i),
            (t = new SWFUpload(e)).upload_delay = e.upload_delay,
            $.browser.msie && 9 == $.browser.version && $(window).bind("unload", function() {
                t.destroy()
            }),
            t;
        if (i.button_placeholder_id || i.button_placeholder) {
            if (i.button_placeholder_id)
                var p = $("#" + i.button_placeholder_id);
            else
                p = $(i.button_placeholder);
            var d = p.parent();
            5 == i.button_image_type || 5 == i.button_image_type ? d.prepend("<input type='button' class='swf-btn' value='文件上传' style='font-family:微软雅黑;color:#8F8F8F;display:inline-block;float:left;width:" + i.button_width + "px;height:" + i.button_height + "px;border:1px solid #dadada;border-radius:2px; background-color: #F5F5F5;' />") : d.append("<input type='button' class='swf-btn' value='文件上传' style='width:71px; height:24px;' />"),
            p.remove(),
            d.find("input.swf-btn").click(function() {
                return alert("您尚未安装flash，点击确定安装。"),
                window.open("http://www.adobe.com/go/getflash"),
                !1
            })
        }
        return null
    }
};
